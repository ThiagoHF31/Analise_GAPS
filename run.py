#!/usr/bin/env python3
"""
WIN$N Financial Data Analyzer
Main execution file - Run this to perform complete analysis

An√°lise Completa de Dados Financeiros WIN$N M1
Arquivo principal - Execute este para realizar toda a an√°lise
"""

import sys
import os
import subprocess
import importlib

# Configura√ß√µes principais
CONFIG = {
    'GAP_MINIMO': 100,           # Gap m√≠nimo em pontos para an√°lise
    'OUTLIER_THRESHOLD': 1.5,    # Multiplicador IQR para outliers  
    'DIAS_LIMITE_GAP': 30,       # Dias para verificar fechamento de gap
    'DATA_FILE': 'data/WIN$N_M1.csv',
    'OUTPUT_DIR': 'output',
    'PROCESSED_DIR': 'data/processed'
}

def install_requirements():
    """Instala depend√™ncias necess√°rias automaticamente"""
    required_packages = [
        'pandas',
        'numpy', 
        'matplotlib',
        'scipy'
    ]
    
    print("üîß Verificando depend√™ncias...")
    
    for package in required_packages:
        try:
            importlib.import_module(package)
            print(f"‚úÖ {package} - OK")
        except ImportError:
            print(f"üì¶ Instalando {package}...")
            try:
                subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
                print(f"‚úÖ {package} - Instalado com sucesso")
            except subprocess.CalledProcessError:
                print(f"‚ùå Erro ao instalar {package}")
                sys.exit(1)
    
    print("‚úÖ Todas as depend√™ncias est√£o prontas!\n")

def check_data_file():
    """Verifica se o arquivo de dados existe"""
    if not os.path.exists(CONFIG['DATA_FILE']):
        print("‚ùå ERRO: Arquivo de dados n√£o encontrado!")
        print(f"üìÅ Esperado: {CONFIG['DATA_FILE']}")
        print("\nüí° Solu√ß√£o:")
        print("   1. Certifique-se de que o arquivo WIN$N_M1.csv est√° na pasta 'data/'")
        print("   2. Verifique se o nome do arquivo est√° correto")
        sys.exit(1)
    
    # Verificar tamanho do arquivo
    file_size = os.path.getsize(CONFIG['DATA_FILE']) / (1024 * 1024)  # MB
    print(f"üìä Arquivo de dados encontrado: {file_size:.1f} MB")

def create_directories():
    """Cria diret√≥rios necess√°rios se n√£o existirem"""
    directories = [
        CONFIG['OUTPUT_DIR'],
        CONFIG['PROCESSED_DIR'],
        f"{CONFIG['OUTPUT_DIR']}/graphs",
        f"{CONFIG['OUTPUT_DIR']}/reports"
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)

def main():
    """Fun√ß√£o principal que executa toda a an√°lise"""
    print("üöÄ WIN$N FINANCIAL DATA ANALYZER")
    print("=" * 50)
    print("An√°lise Completa de Dados Financeiros")
    print("Desenvolvido para o Mercado Brasileiro\n")
    
    # 1. Prepara√ß√£o do ambiente
    install_requirements()
    check_data_file()
    create_directories()
    
    # Importar m√≥dulos ap√≥s instalar depend√™ncias
    try:
        from src.data_processor import DataProcessor
        from src.outlier_analyzer import OutlierAnalyzer  
        from src.gap_analyzer import GapAnalyzer
        from src.gap_classification_analyzer import GapClassificationAnalyzer
        from src.visualizer import Visualizer
        from src.report_generator import ReportGenerator
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {e}")
        print("üí° Certifique-se de que todos os arquivos est√£o na pasta 'src/'")
        sys.exit(1)
    
    print("üì• Iniciando an√°lise dos dados...")
    
    try:
        # 2. Processamento dos dados
        print("\nüìä ETAPA 1: Processamento e Agrega√ß√£o de Dados")
        processor = DataProcessor(CONFIG)
        dados_diarios = processor.carregar_e_agregar_dados()
        
        if dados_diarios is None:
            print("‚ùå Erro no processamento dos dados")
            return
        
        # 3. An√°lise de outliers
        print("\nüîç ETAPA 2: An√°lise de Outliers")
        outlier_analyzer = OutlierAnalyzer(CONFIG)
        dados_sem_outliers = outlier_analyzer.analisar_outliers(dados_diarios)
        
        # 4. An√°lise de gaps
        print("\nüìà ETAPA 3: An√°lise de Gaps")
        gap_analyzer = GapAnalyzer(CONFIG)
        dados_gaps, dados_finais = gap_analyzer.analisar_gaps(dados_sem_outliers)
        
        # 5. Classifica√ß√£o de gaps
        print("\nüéØ ETAPA 4: Classifica√ß√£o Estat√≠stica de Gaps")
        classification_analyzer = GapClassificationAnalyzer(CONFIG)
        gaps_classificados, metricas_classificacao = classification_analyzer.executar_analise_completa()
        
        # 6. Gera√ß√£o de visualiza√ß√µes
        print("\nüìä ETAPA 5: Gera√ß√£o de Gr√°ficos")
        visualizer = Visualizer(CONFIG)
        visualizer.gerar_todos_graficos(dados_diarios, dados_gaps, dados_finais)
        
        # 7. Gera√ß√£o de relat√≥rio
        print("\nüìã ETAPA 6: Gera√ß√£o de Relat√≥rio")
        report_gen = ReportGenerator(CONFIG)
        report_gen.gerar_relatorio_completo(dados_diarios, dados_gaps, dados_finais)
        
        # 7. Resumo final
        print("\n" + "=" * 50)
        print("üéØ AN√ÅLISE CONCLU√çDA COM SUCESSO!")
        print("=" * 50)
        
        print(f"üìä Dados processados:")
        print(f"   ‚Ä¢ Dados di√°rios: {len(dados_diarios)} dias")
        print(f"   ‚Ä¢ Gaps analisados: {len(dados_gaps) if dados_gaps is not None else 0}")
        print(f"   ‚Ä¢ Gaps classificados: {len(gaps_classificados) if gaps_classificados is not None else 0}")
        print(f"   ‚Ä¢ Classes criadas: {len(metricas_classificacao) if metricas_classificacao is not None else 0}")
        print(f"   ‚Ä¢ Dados finais limpos: {len(dados_finais)} dias")
        
        print(f"\nüìÅ Arquivos gerados:")
        print(f"   ‚Ä¢ {CONFIG['PROCESSED_DIR']}/dados_diarios.csv")
        print(f"   ‚Ä¢ {CONFIG['PROCESSED_DIR']}/gaps_analisados.csv") 
        print(f"   ‚Ä¢ {CONFIG['PROCESSED_DIR']}/gaps_classificados.csv")
        print(f"   ‚Ä¢ {CONFIG['PROCESSED_DIR']}/metricas_por_classe.csv")
        print(f"   ‚Ä¢ {CONFIG['PROCESSED_DIR']}/features_para_modelo.csv")
        print(f"   ‚Ä¢ {CONFIG['PROCESSED_DIR']}/dados_limpos_finais.csv")
        print(f"   ‚Ä¢ {CONFIG['OUTPUT_DIR']}/graphs/evolucao_precos.png")
        print(f"   ‚Ä¢ {CONFIG['OUTPUT_DIR']}/graphs/analise_gaps.png")
        print(f"   ‚Ä¢ {CONFIG['OUTPUT_DIR']}/graphs/classificacao_distribuicao.png")
        print(f"   ‚Ä¢ {CONFIG['OUTPUT_DIR']}/graphs/classificacao_probabilidades.png")
        print(f"   ‚Ä¢ {CONFIG['OUTPUT_DIR']}/graphs/classificacao_tempos.png")
        print(f"   ‚Ä¢ {CONFIG['OUTPUT_DIR']}/graphs/classificacao_volatilidade.png")
        print(f"   ‚Ä¢ {CONFIG['OUTPUT_DIR']}/reports/relatorio_completo.txt")
        
        print(f"\nüí° Para usar os dados:")
        print(f"   import pandas as pd")
        print(f"   dados = pd.read_csv('{CONFIG['PROCESSED_DIR']}/dados_limpos_finais.csv')")
        print(f"   gaps_class = pd.read_csv('{CONFIG['PROCESSED_DIR']}/gaps_classificados.csv')")
        print(f"   metricas = pd.read_csv('{CONFIG['PROCESSED_DIR']}/metricas_por_classe.csv')")
        print(f"   features = pd.read_csv('{CONFIG['PROCESSED_DIR']}/features_para_modelo.csv')")
        
        print(f"\nüöÄ An√°lise finalizada! Verifique a pasta 'output/' para resultados.")
        
    except Exception as e:
        print(f"\n‚ùå ERRO DURANTE A AN√ÅLISE: {e}")
        print(f"üí° Verifique:")
        print(f"   ‚Ä¢ Se o arquivo de dados est√° correto")
        print(f"   ‚Ä¢ Se h√° espa√ßo suficiente em disco") 
        print(f"   ‚Ä¢ Se as permiss√µes de escrita est√£o OK")
        
        import traceback
        print(f"\nüîç Detalhes do erro:")
        traceback.print_exc()

if __name__ == "__main__":
    main()