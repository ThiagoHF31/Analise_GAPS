#!/usr/bin/env python3
"""
Gap Analysis Report Generator
=============================
Gera um relat√≥rio detalhado da an√°lise de classifica√ß√£o de gaps
"""

import pandas as pd
import numpy as np

def generate_detailed_report():
    """Gera relat√≥rio detalhado da an√°lise de gaps"""
    
    # Carregar dados
    metricas_df = pd.read_csv('data/processed/metricas_por_classe.csv')
    
    print("üìä RELAT√ìRIO DETALHADO - AN√ÅLISE DE GAPS POR CLASSE")
    print("=" * 80)
    print()
    
    # Resumo geral
    total_gaps = metricas_df['n_observacoes'].sum()
    total_gap_up = metricas_df['n_gap_up'].sum()
    total_gap_down = metricas_df['n_gap_down'].sum()
    
    print(f"üìà RESUMO GERAL:")
    print(f"   ‚Ä¢ Total de gaps analisados: {total_gaps:,}")
    print(f"   ‚Ä¢ Gaps de alta: {total_gap_up:,} ({total_gap_up/total_gaps*100:.1f}%)")
    print(f"   ‚Ä¢ Gaps de baixa: {total_gap_down:,} ({total_gap_down/total_gaps*100:.1f}%)")
    print()
    
    # Tabela detalhada por classe
    print("üìã TABELA DETALHADA POR CLASSE DE GAP:")
    print("=" * 80)
    
    for idx, row in metricas_df.iterrows():
        print(f"\nüîπ CLASSE: {row['intervalo']} pontos")
        print("-" * 50)
        print(f"   üìä Observa√ß√µes: {row['n_observacoes']:,} ({row['n_observacoes']/total_gaps*100:.1f}% do total)")
        print(f"   üìà Gap Up: {row['n_gap_up']:,} ({row['perc_gap_up']:.1f}%)")
        print(f"   üìâ Gap Down: {row['n_gap_down']:,} ({row['perc_gap_down']:.1f}%)")
        print()
        
        print(f"   üéØ PROBABILIDADES DE FECHAMENTO:")
        print(f"      ‚Ä¢ Gap Up: {row['prob_fechamento_up']:.1%}")
        print(f"      ‚Ä¢ Gap Down: {row['prob_fechamento_down']:.1%}")
        print()
        
        print(f"   üìè AMPLITUDES:")
        print(f"      ‚Ä¢ M√°xima: {row['amplitude_maxima']:,.0f} pontos")
        print(f"      ‚Ä¢ M√≠nima: {row['amplitude_minima']:,.0f} pontos")
        print(f"      ‚Ä¢ M√©dia: {row['amplitude_media']:,.0f} pontos")
        print()
        
        print(f"   ‚è±Ô∏è  TEMPOS (em dias):")
        if not pd.isna(row['tempo_pico_up']):
            print(f"      ‚Ä¢ Tempo para pico (Gap Up): {row['tempo_pico_up']:.1f}")
        if not pd.isna(row['tempo_pico_down']):
            print(f"      ‚Ä¢ Tempo para pico (Gap Down): {row['tempo_pico_down']:.1f}")
        if not pd.isna(row['tempo_fechamento_up']):
            print(f"      ‚Ä¢ Tempo fechamento (Gap Up): {row['tempo_fechamento_up']:.1f}")
        if not pd.isna(row['tempo_fechamento_down']):
            print(f"      ‚Ä¢ Tempo fechamento (Gap Down): {row['tempo_fechamento_down']:.1f}")
        print()
        
        print(f"   üìä OUTRAS M√âTRICAS:")
        print(f"      ‚Ä¢ Volatilidade m√©dia: {row['volatilidade_media']:.2f}%")
        print(f"      ‚Ä¢ Gap m√©dio: {row['gap_medio']:.0f} pontos")
        print(f"      ‚Ä¢ Range de gaps: {row['gap_min']:.0f} - {row['gap_max']:.0f} pontos")
    
    # Insights e conclus√µes
    print("\nüß† INSIGHTS E CONCLUS√ïES:")
    print("=" * 80)
    
    # Classe com maior probabilidade de fechamento
    max_prob_up = metricas_df.loc[metricas_df['prob_fechamento_up'].idxmax()]
    max_prob_down = metricas_df.loc[metricas_df['prob_fechamento_down'].idxmax()]
    
    print(f"‚úÖ Maior probabilidade fechamento Gap Up: {max_prob_up['intervalo']} ({max_prob_up['prob_fechamento_up']:.1%})")
    print(f"‚úÖ Maior probabilidade fechamento Gap Down: {max_prob_down['intervalo']} ({max_prob_down['prob_fechamento_down']:.1%})")
    
    # Tempos mais r√°pidos
    tempo_up_validos = metricas_df[~pd.isna(metricas_df['tempo_fechamento_up'])]
    tempo_down_validos = metricas_df[~pd.isna(metricas_df['tempo_fechamento_down'])]
    
    if len(tempo_up_validos) > 0:
        min_tempo_up = tempo_up_validos.loc[tempo_up_validos['tempo_fechamento_up'].idxmin()]
        print(f"‚ö° Fechamento mais r√°pido Gap Up: {min_tempo_up['intervalo']} ({min_tempo_up['tempo_fechamento_up']:.1f} dias)")
    
    if len(tempo_down_validos) > 0:
        min_tempo_down = tempo_down_validos.loc[tempo_down_validos['tempo_fechamento_down'].idxmin()]
        print(f"‚ö° Fechamento mais r√°pido Gap Down: {min_tempo_down['intervalo']} ({min_tempo_down['tempo_fechamento_down']:.1f} dias)")
    
    # Volatilidade
    max_vol = metricas_df.loc[metricas_df['volatilidade_media'].idxmax()]
    min_vol = metricas_df.loc[metricas_df['volatilidade_media'].idxmin()]
    
    print(f"üìà Maior volatilidade: {max_vol['intervalo']} ({max_vol['volatilidade_media']:.2f}%)")
    print(f"üìâ Menor volatilidade: {min_vol['intervalo']} ({min_vol['volatilidade_media']:.2f}%)")
    
    print("\nüí° RECOMENDA√á√ïES PARA TRADING:")
    print("=" * 80)
    print("‚Ä¢ Gaps pequenos (100-265) t√™m alta probabilidade de fechamento r√°pido")
    print("‚Ä¢ Gaps m√©dios (265-455) oferecem bom equil√≠brio risco/retorno") 
    print("‚Ä¢ Gaps grandes (748+) t√™m maior volatilidade mas tempos de fechamento mais longos")
    print("‚Ä¢ Considere stops baseados na amplitude m√°xima hist√≥rica de cada classe")
    print("‚Ä¢ Monitore tempos de pico para otimizar pontos de entrada/sa√≠da")

def create_excel_report():
    """Cria um relat√≥rio em Excel com formata√ß√£o"""
    try:
        metricas_df = pd.read_csv('data/processed/metricas_por_classe.csv')
        
        # Criar arquivo Excel com m√∫ltiplas abas
        with pd.ExcelWriter('output/reports/analise_gaps_detalhada.xlsx', engine='openpyxl') as writer:
            # Aba principal com m√©tricas
            metricas_df.to_excel(writer, sheet_name='M√©tricas por Classe', index=False)
            
            # Aba com dados classificados (sample)
            gaps_class = pd.read_csv('data/processed/gaps_classificados.csv')
            gaps_sample = gaps_class.head(100)  # Apenas uma amostra para n√£o ficar muito grande
            gaps_sample.to_excel(writer, sheet_name='Amostra Dados', index=False)
            
            # Aba com features para modelo
            features = pd.read_csv('data/processed/features_para_modelo.csv')
            features.head(100).to_excel(writer, sheet_name='Features Modelo', index=False)
        
        print(f"\nüìä Relat√≥rio Excel criado: output/reports/analise_gaps_detalhada.xlsx")
        
    except ImportError:
        print("‚ö†Ô∏è  Para gerar arquivo Excel, instale: pip install openpyxl")

if __name__ == "__main__":
    generate_detailed_report()
    create_excel_report()